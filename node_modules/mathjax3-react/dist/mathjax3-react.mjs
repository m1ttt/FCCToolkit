import { jsx as s, Fragment as m } from "react/jsx-runtime";
import { createContext as y, useState as v, useEffect as h, useContext as J } from "react";
const E = { url: "", attrs: {}, inBody: !1, insertInto: null, removeScript: !1 };
function p(t) {
  return Array.isArray(t) ? Promise.all(t.map(p)) : new Promise((n, e) => {
    if (!(typeof t == "object" && t.url || typeof t == "string"))
      return console.log({ config: t }), void e(new Error("Object with url or url string needed"));
    const r = Object.assign({}, E, typeof t == "string" ? { url: t } : t), { url: a, attrs: i, inBody: d, insertInto: c, removeScript: l } = r, o = document.createElement("script"), u = c ? document.querySelector(c) : d ? document.body : document.head;
    if (i && typeof i == "object")
      for (const f of Object.keys(i))
        o.setAttribute(f, i[f]);
    u != null ? (o.addEventListener("load", () => {
      l && u.removeChild(o), n(l ? void 0 : o);
    }), o.addEventListener("error", () => {
      l && u.removeChild(o), e(new Error("Loading script error"));
    }), o.src = a, u.appendChild(o)) : e(new Error("No DOM element to append script"));
  });
}
const x = y({}), b = (t) => {
  const n = t.url || C, e = t.options || g, [r, a] = v(e);
  window.MathJax = r, h(() => {
    p(n).then(i).catch(d);
  }, [n]);
  function i() {
    a(window.MathJax);
  }
  function d(c) {
    console.log(c);
  }
  return /* @__PURE__ */ s(x.Provider, { value: r, ...t });
}, g = {}, C = "https://cdn.jsdelivr.net/npm/mathjax@3.0.1/es5/tex-mml-chtml.js", j = () => J(x), M = () => {
  const t = j();
  function n(r = () => {
  }) {
    !t || typeof t.typesetPromise != "function" || t.typesetPromise().then(r).catch((a) => {
      e(a) || console.log(a);
    });
  }
  function e(r) {
    return r instanceof TypeError;
  }
  return [t, n];
};
function P({ formula: t }) {
  const [n, e] = M();
  return h(() => {
    e();
  }), n ? /* @__PURE__ */ s("div", { children: t }) : /* @__PURE__ */ s(m, {});
}
function O({ html: t, onFinishRender: n }) {
  const [e, r] = M();
  return h(() => {
    e && r(n);
  }, [e, r, n]), e ? /* @__PURE__ */ s("div", { dangerouslySetInnerHTML: { __html: t } }) : /* @__PURE__ */ s(m, {});
}
export {
  P as MathJaxFormula,
  O as MathJaxHtml,
  b as MathJaxProvider
};
